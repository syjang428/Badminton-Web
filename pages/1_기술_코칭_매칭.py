import streamlit as st
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from datetime import datetime

# ‚Üê Ïó¨Í∏∞ Î∞îÎ°ú Î∞ë (ÎùºÏù¥Î∏åÎü¨Î¶¨ import Î∞ë)
def parse_times(value):
    if not value:
        return []
    if isinstance(value, str):
        return [x.strip() for x in value.split(",")]
    elif isinstance(value, list):
        return value
    else:
        return []

def parse_levels(value):
    if not value:
        return []
    if isinstance(value, int):
        return [value]
    elif isinstance(value, str):
        return [int(x.strip()) for x in value.split(",") if x.strip().isdigit()]
    elif isinstance(value, list):
        return [int(x) for x in value]
    else:
        return []

# ------------------ ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï ------------------
st.set_page_config(page_title="ÏΩîÏπ≠ Îß§Ïπ≠", layout="wide")

# ------------------ Íµ¨Í∏Ä ÏãúÌä∏ Ïó∞Îèô ------------------
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]

creds_dict = {
  "type": "service_account",
  "project_id": "streamlit-badminton",
  "private_key_id": "05c46b2ff12bf6691ed8e05802d6a262f957937f",
  "private_key": """-----BEGIN PRIVATE KEY-----
MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQDDwjleXvs12Fgn
zOb0KhS1m6Wx9XXc4nuav3kxr+1YL1wedXUsAH5DehY1KSZF4zb7n9YzexsMQTpG
Hcccb/2pvPJEo+Iwlm20kacs77h30buThHVHHzi50QOUBo8jooaZ6QM97SyMir8L
WrO/Q+x7rFv3Zfx7dhScYVF1P7STrwwlQjZ+H4ALdK1tASBTcMlfCOGeclJuvyxb
C0BjJSk182Naa28Wx/Q+iN7Tjxokd/u6GA09ZHSjBpZwepRmy3Q46sU4BIfhsVgN
m/sg08qDIXN9WNhGgXzau8WOLjDlIqRKZAUOKqzjQTEBuYAXY3nxXjuUwh7Xg/4I
4Mx8TEo1AgMBAAECggEATlzA70yRPhg5DdGhwCraOGqylP7f7AiDl0o/nwrANXVb
6Ft3iKI36RYFrskmp4JRn793lQsaJDk2NRw1eOZBwkE/MAf0gyOsjcRiigP6MYi1
EFPNSKewYv3O82H+ybKFNDZJFHCNTUM7P7XSz2VG1KkF9Y6PV/LIRGNWottaE2Wj
efVO2/L4dYsTl5GNq9BEw0j+dculGMJMUMKpX0qwTGF14sc9FaCDu4S+/i20YeJ6
Dn2Y0RRnLew5iyQBfNly9C2Xn19c0/rEVEKsH6Rcu3CAeCmtE6FWTUy1TvK2VQk4
hn7nKNlDZkCnX+u8C1F+uwTAwQhD6+cxlyf2l+HXfwKBgQDg3MUmoRNzJmK8u04C
oEuNkxE8mnGSHuclnnjIlDc6ONpzW5gCyceyZHeo/glwQ+U1PatlEmDtUzex0p3L
Ge0J+zTn1m8AfxXlHY8RLURBq2Qy8qdUzmfDDYuHawE16RD9zctFHxzlsyzCaPjG
TGyvwguCzzPXl03+584vSa8E0wKBgQDe3b8NndhhxCBRSKCges6xV8KQEmPqHeDY
0bBhWvQL0EQXG80sntYyNY4OTLiFvfFszdwJyWkjOCQHPWcY1J6tPn2YrKiUZPLA
h4BukP5q5F0wYDR9aUYaArY2Eh5G64sDAuTRXUDXC21+S/wFfbkaa8ok5h5Wlsd3
V1oTTBGv1wKBgF8Rd9kJKOv6QqyAlE7P7qGAmD0DHxkkL53cDjzfTSo0d0dmZjJn
lSJ7D4xHOz5XtkR4OkqVJp2wHU/1N/lykKEzr/6EzpFrKZqgkKg2dzE8gTR5Gv3j
9kKlK2SpfO2KCEEGDPbAXLtQsY/QSb2s+hak97DqYYS416T55FZh1Lk5AoGBAJQD
5g2fFcTowyX4/GVY6smxpZCWBjHJIjoeGeyuwYLPEUnftwa5fzzdgLlSjwKUQjGn
D0qYr/EqKhN83moJXFFnPXcWxOe5m9fupofIWJCZlqK4YmQgdOR1hJqosd8cNLkN
RPcf3h50goXs5TaoZzV6/UhAZUnQ3i0OoM5MKTsFAoGAKbVezmwTBa2nOECoU8UL
MsIw8edthaCinW/nJLtQb769Es/X7rHrQ5nplAPgls3Y3jlNwZEzFRl7dbFpMbCp
8X+9sZdYqg8It26dkLHpvSnHCwO434qPGOPLUWgblBRYdXdrInEXuEcVVY7/i1kr
CzyjDtjgwa6aiLPMyniPHSc=
-----END PRIVATE KEY-----""",
  "client_email": "badminton@streamlit-badminton.iam.gserviceaccount.com",
  "client_id": "115918370315226724362",
  "auth_uri": "https://accounts.google.com/o/oauth2/auth",
  "token_uri": "https://oauth2.googleapis.com/token",
  "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
  "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/badminton%40streamlit-badminton.iam.gserviceaccount.com"
}

creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)
@st.cache_resource
def get_sheet():
    return client.open_by_url("https://docs.google.com/spreadsheets/d/1CT5AC_bNhWHm3YxPuI00xhdgYrYu2XMNZVFBT31R0aw/edit?usp=sharing")
sheet = get_sheet()

# ÏõåÌÅ¨ÏãúÌä∏ Î∂àÎü¨Ïò§Í∏∞
ws_participants = sheet.worksheet("Ï∞∏Í∞ÄÏûê")
ws_absentees = sheet.worksheet("Î∂àÏ∞∏Ïûê")
ws_matches = sheet.worksheet("Îß§Ïπò")
ws_feedbacks = sheet.worksheet("ÌõÑÍ∏∞")

# ---- Í∞Å ÏõåÌÅ¨ÏãúÌä∏Î≥Ñ Ï∫êÏã± Î°úÎçî ----
@st.cache_data(ttl=60)
def load_participants_cached():
    return ws_participants.get_all_records()

@st.cache_data(ttl=60)
def load_absentees_cached():
    return ws_absentees.get_all_records()

@st.cache_data(ttl=60)
def load_matches_cached():
    return ws_matches.get_all_records()

@st.cache_data(ttl=60)
def load_feedbacks_cached():
    return ws_feedbacks.get_all_records()


# ------------------ üé® Ïä§ÌÉÄÏùº ------------------
st.markdown("""
    <style>
    .title {text-align: center; color: teal; font-size: 36px; font-weight: bold; margin-bottom: 10px;}
    .subtitle {text-align: center; font-size: 20px; margin-bottom: 30px;}
    .team-box {border: 2px solid #00bcd4; border-radius: 10px; padding: 10px; margin-bottom: 20px; background-color: #f0f9fb;}
    .waiting {font-size: 14px; color: gray;}
    </style>
    <div class="title">üè∏ Í∏∞Ïà† ÏΩîÏπ≠ Îß§Ïπ≠</div>
    <hr>
""", unsafe_allow_html=True)

# ------------------ ÏÑ∏ÏÖò ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî ------------------
if "is_admin" not in st.session_state:
    st.session_state.is_admin = False
if "password" not in st.session_state:
    st.session_state.password = ""
if "finalized" not in st.session_state:
    st.session_state.finalized = False
if "show_participants" not in st.session_state:
    st.session_state.show_participants = False
if "show_absentees" not in st.session_state:
    st.session_state.show_absentees = False
if "show_matching" not in st.session_state:
    st.session_state.show_matching = False
if "show_feedbacks" not in st.session_state:
    st.session_state.show_feedbacks = False

# ------------------ üîê Í¥ÄÎ¶¨Ïûê Î°úÍ∑∏Ïù∏ ------------------
with st.sidebar:
    st.markdown("### üîê Í¥ÄÎ¶¨Ïûê Î™®Îìú")

    password = st.text_input("ÎπÑÎ∞ÄÎ≤àÌò∏ ÏûÖÎ†•", type="password", value=st.session_state.get("password", ""), key="password_input")
    st.session_state.password = password

    if password == "04281202":
        st.session_state.is_admin = True
        st.success("Í¥ÄÎ¶¨Ïûê Î™®Îìú ÌôúÏÑ±ÌôîÎê®")
    else:
        st.session_state.is_admin = False
        if password != "":
            st.error("ÎπÑÎ∞ÄÎ≤àÌò∏Í∞Ä ÌãÄÎ¶ΩÎãàÎã§")

    if st.session_state.is_admin:
        if st.sidebar.button("üîì Í¥ÄÎ¶¨Ïûê Î™®Îìú Ï¢ÖÎ£å", key="admin_exit_btn"):
            st.session_state.is_admin = False
            st.session_state.password = ""
            st.rerun()

        if st.sidebar.button("üë• Ï∞∏Í∞ÄÏûê ÌòÑÌô©", key="show_participants_btn"):
            st.session_state.show_participants = not st.session_state.get("show_participants", False)
            st.session_state.show_absentees = False
            st.session_state.show_matching = False
            st.session_state.show_feedbacks = False

        if st.sidebar.button("üö´ Î∂àÏ∞∏Ïûê ÌôïÏù∏", key="show_absentees_btn"):
            st.session_state.show_participants = False
            st.session_state.show_matching = False
            st.session_state.show_feedbacks = False
            st.session_state.show_absentees = not st.session_state.get("show_absentees", False)
        
        if st.sidebar.button("üé≤ ÏΩîÏπ≠ Îß§Ïπ≠", key="show_matching_btn"):
            st.session_state.show_matching = not st.session_state.get("show_matching", False)
            st.session_state.show_participants = False
            st.session_state.show_absentees = False
            st.session_state.show_feedbacks = False

        if st.sidebar.button("üìù ÌõÑÍ∏∞ ÌôïÏù∏", key="show_feedbacks_btn"):
            st.session_state.show_feedbacks = not st.session_state.get("show_feedbacks", False)
            st.session_state.show_participants = False
            st.session_state.show_absentees = False
            st.session_state.show_matching = False

        if st.sidebar.button("üîÑ Ï¥àÍ∏∞Ìôî", key="reset_btn"):

            def reset_all():
                # Íµ¨Í∏Ä ÏãúÌä∏ Ï¥àÍ∏∞Ìôî Î∞è Ìó§Îçî Ïû¨ÏÑ§Ï†ï
                ws_participants.clear()
                ws_participants.append_row(["Ïù¥Î¶Ñ", "Ïó≠Ìï†", "ÏΩîÏπ≠ Í∞ÄÎä• Î†àÎ≤®", "ÏΩîÏπ≠ Í∞ÄÎä• ÏãúÍ∞ÑÎåÄ", "ÌïôÏÉù Î†àÎ≤®", "Ìù¨Îßù Í∏∞Ïà†", "Í∏∞ÌÉÄ Í∏∞Ïà†", "Î†àÏä® Ìù¨Îßù ÏãúÍ∞ÑÎåÄ"])

                ws_absentees.clear()
                ws_absentees.append_row(["Ïù¥Î¶Ñ", "Î∂àÏ∞∏ ÏÇ¨Ïú†"])

                ws_matches.clear()
                ws_matches.append_row(["ÏãúÍ∞Ñ", "ÏΩîÏπ≠Ïûê", "Î†àÏä®Ïûê", "Í∏∞Ïà†"])

                ws_feedbacks.clear()
                ws_feedbacks.append_row(["Ïó≠Ìï†", "Ïù¥Î¶Ñ", "ÏãúÍ∞Ñ", "ÌõÑÍ∏∞", "ÏûëÏÑ±ÏãúÍ∞Ñ"])

                load_participants_cached.clear()
                load_absentees_cached.clear()
                load_matches_cached.clear()
                load_feedbacks_cached.clear()

                # ÏÑ∏ÏÖò ÏÉÅÌÉú Ï§ë Ï¥àÍ∏∞ÌôîÌï† ÌÇ§Îßå ÏÑ†ÌÉùÏ†ÅÏúºÎ°ú Ï¥àÍ∏∞Ìôî
                keys_to_reset = ["participants", "non_attendees", "attendance", "game_results",
                                "teams", "team_pairs", "match_scores", "partner_selections"]

                for key in keys_to_reset:
                    if key in st.session_state:
                        if isinstance(st.session_state[key], dict):
                            st.session_state[key] = {}
                        elif isinstance(st.session_state[key], list):
                            st.session_state[key] = []
                        else:
                            st.session_state[key] = None

                # Ï¥àÍ∏∞Ìôî ÏôÑÎ£å ÌîåÎûòÍ∑∏ ÏÑ§Ï†ï
                st.session_state["just_reset"] = True

            reset_all()
            st.rerun()

        if st.session_state.get("just_reset"):
            st.success("Ï¥àÍ∏∞Ìôî ÏôÑÎ£å")
            del st.session_state["just_reset"]

# üìå Íµ¨Í∏Ä ÏãúÌä∏ÏôÄ ÏÑ∏ÏÖò ÏÉÅÌÉúÎ•º Ìï®Íªò ÌôïÏù∏ÌïòÎäî ÏµúÏ¢Ö Îß§Ïπ≠ Ïó¨Î∂Ä ÌåêÎ≥Ñ
def is_finalized():
    match_data = load_matches_cached()
    if len(match_data) > 0:
        return True
    return st.session_state.get("finalized", False)

# ------------------ Í¥ÄÎ¶¨Ïûê Î™®Îìú Î©îÏù∏ ÏòÅÏó≠ ------------------
if st.session_state.is_admin:
    # Ï∞∏Í∞ÄÏûê ÌòÑÌô©
    if st.session_state.get("show_participants", False):
        participants_data = load_participants_cached()
        st.subheader("üë• Ï∞∏Í∞ÄÏûê ÌòÑÌô©")
        if participants_data:
            st.dataframe(participants_data)
        else:
            st.info("Ï∞∏Í∞ÄÏûê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")


    # Î∂àÏ∞∏Ïûê ÌòÑÌô©
    if st.session_state.get("show_absentees", False):
        absentees_data = load_absentees_cached()  # Ï∞∏Í∞ÄÏûê ÏõåÌÅ¨ÏãúÌä∏Í∞Ä ÏïÑÎãàÎùº Î∂àÏ∞∏Ïûê ÏõåÌÅ¨ÏãúÌä∏ ÌôïÏù∏
        if absentees_data:
            st.subheader("üö´Î∂àÏ∞∏Ïûê ÌòÑÌô©")
            st.dataframe(absentees_data)
        else:
            st.info("Î∂àÏ∞∏Ïûê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")

    # ------------------ ÏΩîÏπ≠ Îß§Ïπ≠ (Í¥ÄÎ¶¨Ïûê) ------------------
    if st.session_state.get("show_matching", False):
        participants = load_participants_cached()
        coaches = [p for p in participants if "ÏΩîÏπ≠Ïûê" in p["Ïó≠Ìï†"]]
        students = [p for p in participants if "Î†àÏä®Ïûê" in p["Ïó≠Ìï†"]]

        timeslots = ["1:10~1:20", "1:20~1:30", "1:30~1:40", "1:40~1:50"]
        courts = [f"{i}ÏΩîÌä∏" for i in range(1, 8)]
        matches = []
        assigned_students_global = set()
        participants_dict = {p["Ïù¥Î¶Ñ"]: p for p in participants}

        # Îß§Ïπ≠ Î°úÏßÅ (Í∏∞Ï°¥ Í∑∏ÎåÄÎ°ú)
        for t in timeslots:
            court_assignment = {c: {"ÏΩîÏπ≠Ïûê": "", "Î†àÏä®Ïûê": "", "Í∏∞Ïà†": ""} for c in courts}
            assigned_coaches_local = set()

            # 1Ô∏è‚É£ ÌïôÏÉù-ÏΩîÏπò Î∞∞Ïπò
            for student in students:
                if student["Ïù¥Î¶Ñ"] in assigned_students_global:
                    continue
                student_times = parse_times(student.get("Î†àÏä® Ìù¨Îßù ÏãúÍ∞ÑÎåÄ"))
                student_levels = parse_levels(student.get("ÌïôÏÉù Î†àÎ≤®"))
                student_skill = student.get("Ìù¨Îßù Í∏∞Ïà†", "")
                matched = False

                for coach in coaches:
                    if coach["Ïù¥Î¶Ñ"] in assigned_coaches_local:
                        continue
                    coach_times = parse_times(coach.get("ÏΩîÏπ≠ Í∞ÄÎä• ÏãúÍ∞ÑÎåÄ"))
                    coach_levels = parse_levels(coach.get("ÏΩîÏπ≠ Í∞ÄÎä• Î†àÎ≤®"))

                    if t in student_times and t in coach_times and any(l <= cl for l in student_levels for cl in coach_levels):
                        for court in courts:
                            if court_assignment[court]["Î†àÏä®Ïûê"] == "":
                                court_assignment[court]["Î†àÏä®Ïûê"] = student["Ïù¥Î¶Ñ"]
                                court_assignment[court]["ÏΩîÏπ≠Ïûê"] = coach["Ïù¥Î¶Ñ"]
                                court_assignment[court]["Í∏∞Ïà†"] = student_skill
                                assigned_students_global.add(student["Ïù¥Î¶Ñ"])
                                assigned_coaches_local.add(coach["Ïù¥Î¶Ñ"])
                                matched = True
                                break
                        if matched:
                            break

            # 2Ô∏è‚É£ ÎÇ®ÏùÄ ÌïôÏÉù Î∞∞Ïπò
            for student in students:
                if student["Ïù¥Î¶Ñ"] in assigned_students_global:
                    continue
                if t in parse_times(student.get("Î†àÏä® Ìù¨Îßù ÏãúÍ∞ÑÎåÄ")):
                    for court in courts:
                        if court_assignment[court]["Î†àÏä®Ïûê"] == "":
                            court_assignment[court]["Î†àÏä®Ïûê"] = student["Ïù¥Î¶Ñ"]
                            court_assignment[court]["ÏΩîÏπ≠Ïûê"] = ""
                            court_assignment[court]["Í∏∞Ïà†"] = student.get("Ìù¨Îßù Í∏∞Ïà†", "")
                            assigned_students_global.add(student["Ïù¥Î¶Ñ"])
                            break

            # 3Ô∏è‚É£ Îπà ÏΩîÌä∏Ïóê ÏΩîÏπòÎßå Î∞∞Ïπò
            for coach in coaches:
                if t in parse_times(coach.get("ÏΩîÏπ≠ Í∞ÄÎä• ÏãúÍ∞ÑÎåÄ")) and coach["Ïù¥Î¶Ñ"] not in assigned_coaches_local:
                    for court in courts:
                        if court_assignment[court]["Î†àÏä®Ïûê"] == "":
                            court_assignment[court]["ÏΩîÏπ≠Ïûê"] = coach["Ïù¥Î¶Ñ"]
                            court_assignment[court]["Î†àÏä®Ïûê"] = "Îπà ÏΩîÌä∏"
                            court_assignment[court]["Í∏∞Ïà†"] = ""
                            assigned_coaches_local.add(coach["Ïù¥Î¶Ñ"])
                            break

            # matches Î¶¨Ïä§Ìä∏ ÏÉùÏÑ±
            for court in courts:
                matches.append({
                    "ÏãúÍ∞Ñ": t,
                    "ÏΩîÌä∏": court,
                    "ÏΩîÏπ≠Ïûê": court_assignment[court]["ÏΩîÏπ≠Ïûê"],
                    "Î†àÏä®Ïûê": court_assignment[court]["Î†àÏä®Ïûê"],
                    "Í∏∞Ïà†": court_assignment[court]["Í∏∞Ïà†"]
                })

         # ================== ÏãúÍ∞ÑÎåÄÎ≥Ñ Ï∂úÎ†• ==================
        st.subheader("üé≤ ÏãúÍ∞ÑÎåÄÎ≥Ñ ÏΩîÏπ≠ Îß§Ïπ≠ (Í¥ÄÎ¶¨Ïûê)")
        for t in timeslots:
            with st.expander(f"üïí {t}", expanded=True):
                t_matches = [m for m in matches if m["ÏãúÍ∞Ñ"] == t]
                for m in t_matches:
                    col1, col2, col3, col4, col5, col6 = st.columns([1,1,1,1,1,2])
                    
                    # ÏΩîÌä∏
                    with col1:
                        st.write(m["ÏΩîÌä∏"])

                    # ÏΩîÏπ≠Ïûê ÏÑ†ÌÉù
                    with col2:
                        coach_options = [c["Ïù¥Î¶Ñ"] for c in coaches] + [""]
                        coach_edit = st.selectbox(
                            f"{m['ÏãúÍ∞Ñ']}_{m['ÏΩîÌä∏']}_ÏΩîÏπ≠Ïûê",
                            options=coach_options,
                            index=coach_options.index(m["ÏΩîÏπ≠Ïûê"]) if m["ÏΩîÏπ≠Ïûê"] in coach_options else 0,
                            key=f"coach_edit_{m['ÏãúÍ∞Ñ']}_{m['ÏΩîÌä∏']}"
                        )

                    # ÏΩîÏπ≠Ïûê Î†àÎ≤® (Í¥ÄÎ¶¨Ïûê Î™®Îìú Ï†ÑÏö©)
                    with col3:
                        if coach_edit in participants_dict:
                            coach_levels = participants_dict[coach_edit].get("ÏΩîÏπ≠ Í∞ÄÎä• Î†àÎ≤®", "")
                            st.markdown(f"Î†àÎ≤®: {coach_levels}" if coach_levels else "Î†àÎ≤®: -")

                    # Î†àÏä®Ïûê ÏÑ†ÌÉù
                    with col4:
                        student_options = [s["Ïù¥Î¶Ñ"] for s in students] + ["Îπà ÏΩîÌä∏", ""]
                        student_edit = st.selectbox(
                            f"{m['ÏãúÍ∞Ñ']}_{m['ÏΩîÌä∏']}_Î†àÏä®Ïûê",
                            options=student_options,
                            index=student_options.index(m["Î†àÏä®Ïûê"]) if m["Î†àÏä®Ïûê"] in student_options else 0,
                            key=f"student_edit_{m['ÏãúÍ∞Ñ']}_{m['ÏΩîÌä∏']}"
                        )

                    # Î†àÏä®Ïûê Î†àÎ≤® (Í¥ÄÎ¶¨Ïûê Î™®Îìú Ï†ÑÏö©)
                    with col5:
                        if student_edit in participants_dict:
                            student_level = participants_dict[student_edit].get("ÌïôÏÉù Î†àÎ≤®", "")
                            st.markdown(f"Î†àÎ≤®: {student_level}" if student_level else "Î†àÎ≤®: -")

                    # Í∏∞Ïà† ÏûÖÎ†•
                    with col6:
                        skill_default = participants_dict.get(student_edit, {}).get("Ìù¨Îßù Í∏∞Ïà†", "")
                        skill_edit = st.text_input(
                            f"{m['ÏãúÍ∞Ñ']}_{m['ÏΩîÌä∏']}_Í∏∞Ïà†",
                            value=skill_default,
                            key=f"skill_edit_{m['ÏãúÍ∞Ñ']}_{m['ÏΩîÌä∏']}"
                        )
        # ------------------ ‚úÖ Î∞∞Ï†ï ÏÉÅÌÉú ÌôïÏù∏ Î≤ÑÌäº ------------------
        if st.button("Î∞∞Ï†ï ÏÉÅÌÉú ÌôïÏù∏", key="check_assignment_btn"):
            issues = []  # Î¨∏Ï†ú Î©îÏãúÏßÄ Î™®Ïùå

            # ÏãúÍ∞ÑÎåÄÎ≥Ñ ÏΩîÏπ≠Ïûê/Î†àÏä®Ïûê Ï≤¥ÌÅ¨
            for t in timeslots:
                assigned_coaches = []
                assigned_students = []
                for court in courts:
                    coach_val = st.session_state.get(f"coach_edit_{t}_{court}", "")
                    student_val = st.session_state.get(f"student_edit_{t}_{court}", "")

                    # Îπà ÏΩîÌä∏, Îπà Î¨∏ÏûêÏó¥ Ï†úÏô∏
                    if coach_val not in ["", "Îπà ÏΩîÌä∏"]:
                        assigned_coaches.append(coach_val)
                    if student_val not in ["", "Îπà ÏΩîÌä∏"]:
                        assigned_students.append(student_val)

                # 1Ô∏è‚É£ Ï§ëÎ≥µ Ï≤¥ÌÅ¨
                dup_coaches = [c for c in set(assigned_coaches) if assigned_coaches.count(c) > 1]
                dup_students = [s for s in set(assigned_students) if assigned_students.count(s) > 1]

                if dup_coaches:
                    issues.append(f"‚ö†Ô∏è ÏãúÍ∞ÑÎåÄ {t}: Ï§ëÎ≥µ ÏΩîÏπ≠Ïûê - {', '.join(dup_coaches)}")
                if dup_students:
                    issues.append(f"‚ö†Ô∏è ÏãúÍ∞ÑÎåÄ {t}: Ï§ëÎ≥µ Î†àÏä®Ïûê - {', '.join(dup_students)}")

            # 2Ô∏è‚É£ Î™®Îì† Î†àÏä®Ïûê Î∞∞Ï†ï Ïó¨Î∂Ä Ï≤¥ÌÅ¨
            all_students = [s["Ïù¥Î¶Ñ"] for s in students if s["Ïù¥Î¶Ñ"] not in ["", "Îπà ÏΩîÌä∏"]]
            assigned_students_global = []
            for t in timeslots:
                for court in courts:
                    student_val = st.session_state.get(f"student_edit_{t}_{court}", "")
                    if student_val not in ["", "Îπà ÏΩîÌä∏"]:
                        assigned_students_global.append(student_val)
            unassigned_students = [s for s in all_students if s not in assigned_students_global]
            if unassigned_students:
                issues.append(f"‚ö†Ô∏è Î∞∞Ï†ïÎêòÏßÄ ÏïäÏùÄ Î†àÏä®Ïûê: {', '.join(unassigned_students)}")

            # Í≤∞Í≥º ÌëúÏãú
            if not issues:
                st.success("‚úÖ Î™®Îì† Î†àÏä®ÏûêÍ∞Ä Î∞∞Ï†ïÎêòÏóàÍ≥†, Ï§ëÎ≥µ Î∞∞Ï†ïÎèÑ ÏóÜÏäµÎãàÎã§.")
            else:
                for msg in issues:
                    st.warning(msg)

        # ‚úÖ ÏµúÏ¢Ö Ï†úÏ∂ú Î≤ÑÌäº
        if st.button("ÏµúÏ¢Ö Ï†úÏ∂ú", key="submit_matches_btn"):
            ws_matches.clear()
            ws_matches.append_row(["ÏãúÍ∞Ñ","ÏΩîÌä∏","ÏΩîÏπ≠Ïûê","Î†àÏä®Ïûê","Í∏∞Ïà†"])
            
            for t in timeslots:
                for m in [mm for mm in matches if mm["ÏãúÍ∞Ñ"] == t]:
                    coach_val = st.session_state.get(f"coach_edit_{m['ÏãúÍ∞Ñ']}_{m['ÏΩîÌä∏']}", "")
                    student_val = st.session_state.get(f"student_edit_{m['ÏãúÍ∞Ñ']}_{m['ÏΩîÌä∏']}", "")
                    skill_val = st.session_state.get(f"skill_edit_{m['ÏãúÍ∞Ñ']}_{m['ÏΩîÌä∏']}", "")
                    
                    # ‚¨Ö ÏàòÏ†ï: Î†àÏä®Ïûê/ÏΩîÏπ≠Ïûê Í∞íÏù¥ Ïú†Ìö®Ìï† ÎïåÎßå Í∏∞Î°ù
                    if student_val and student_val != "Îπà ÏΩîÌä∏":
                        ws_matches.append_row([m["ÏãúÍ∞Ñ"], m["ÏΩîÌä∏"], coach_val if coach_val else "", student_val, skill_val])
            
            load_matches_cached.clear()
            st.session_state.finalized = True
            st.success("ÏµúÏ¢Ö Îß§Ïπ≠ ÏôÑÎ£å! Î™®Îì† ÏΩîÌä∏Í∞Ä Î∞òÏòÅÎêòÏóàÏäµÎãàÎã§.")


    # ÌõÑÍ∏∞ ÌôïÏù∏
    if st.session_state.get("show_feedbacks", False):
        feedbacks_data = load_feedbacks_cached()
        if feedbacks_data:
            st.subheader("ÏΩîÏπ≠ ÌõÑÍ∏∞")
            st.dataframe(feedbacks_data)
        else:
            st.info("Îì±Î°ùÎêú ÏΩîÏπ≠ ÌõÑÍ∏∞Í∞Ä ÏóÜÏäµÎãàÎã§.")


# ÎπÑÍ¥ÄÎ¶¨Ïûê Î™®ÎìúÏóêÏÑú Ï∞∏Í∞ÄÏûê Ï†úÏ∂ú Ï†Ñ ÏûÖÎ†• Î∂ÄÎ∂Ñ
if not st.session_state.is_admin and not st.session_state.finalized:
    name = st.text_input("ÏÑ±Î™ÖÏùÑ ÏûÖÎ†•ÌïòÏãúÏò§")
    lunch = st.radio("Ïò§Îäò Ï†êÏã¨Ïóê Ïò§ÎÇòÏöî?", ["Ïòà", "ÏïÑÎãàÏò§"])

    # Ïó¨Í∏∞Ïóê reason Î≥ÄÏàòÎ•º ÎØ∏Î¶¨ Îπà Î¨∏ÏûêÏó¥Î°ú ÏÑ†Ïñ∏
    reason = ""

    if lunch == "Ïòà":
        role = st.radio("Ïó≠Ìï† ÏÑ†ÌÉù", ["ÏΩîÏπ≠Ïûê", "Î†àÏä®Ïûê"], index=None)
        roles = [role] if role else []

        coach_level_max = None
        coach_times = []
        student_level = []
        skills = []
        other_skill = ""
        student_times = []

        if role == "ÏΩîÏπ≠Ïûê":
            coach_level_max = st.slider("ÏΩîÏπ≠ Í∞ÄÎä• ÏµúÎåÄ Î†àÎ≤® ÏÑ†ÌÉù", 1, 5, 3, key="coach_level_max_slider")
            st.markdown(
                '<div style="display:flex; justify-content: space-between; color: gray; font-size: 12px; margin-top: 4px;">'
                '<span>1</span><span>2</span><span>3</span><span>4</span><span>5</span></div>',
                unsafe_allow_html=True
            )

            st.write("ÏΩîÏπ≠ Í∞ÄÎä• ÏãúÍ∞ÑÎåÄ ÏÑ†ÌÉù (Ï§ëÎ≥µ Í∞ÄÎä•):")
            times = ["1:10~1:20", "1:20~1:30", "1:30~1:40", "1:40~1:50"]
            coach_times = []
            for t in times:
                if st.checkbox(t, key=f"coach_time_{t}"):
                    coach_times.append(t)

        elif role == "Î†àÏä®Ïûê":
            student_level = st.radio("Î≥∏Ïù∏ Î†àÎ≤® ÏÑ†ÌÉù", [1, 2, 3, 4, 5], key="student_level_radio")
            skills = st.multiselect(
                "Ìù¨Îßù Í∏∞Ïà†",
                ["Ïä§ÌÖù", "ÌÅ¥Î¶¨Ïñ¥", "Ïä§Îß§Ïâ¨", "Ìó§Ïñ¥ÌïÄ", "ÎìúÎ°≠", "Ïñ∏Îçî", "ÎìúÎùºÏù¥Î∏å", "Ìë∏Ïâ¨", "Í∏∞ÌÉÄ"],
                key="skills_multiselect"
            )
            if "Í∏∞ÌÉÄ" in skills:
                other_skill = st.text_input("Í∏∞ÌÉÄ Í∏∞Ïà† ÏûÖÎ†•", key="other_skill_text")
            student_times = st.radio(
                "Î†àÏä® Ìù¨Îßù ÏãúÍ∞ÑÎåÄ ÏÑ†ÌÉù",
                ["1:10~1:20", "1:20~1:30", "1:30~1:40", "1:40~1:50"],
                key="student_times_radio"
            )

    else:
        reason = st.text_area("Î∂àÏ∞∏ ÏÇ¨Ïú†Î•º ÏûëÏÑ±ÌïòÏÑ∏Ïöî")  # lunch == "ÏïÑÎãàÏò§"Ïùº Îïå reason ÏûÖÎ†• Î∞õÍ∏∞

    # Ï†úÏ∂ú Î≤ÑÌäº (ÎπÑÍ¥ÄÎ¶¨Ïûê)
    if st.button("Ï†úÏ∂ú", key="submit_participant_btn"):
        if lunch == "Ïòà":
            ws_participants.append_row([
                str(name),
                ", ".join(roles) if roles else "",
                str(coach_level_max) if coach_level_max else "",
                ", ".join(coach_times) if coach_times else "",
                str(student_level) if student_level else "",
                ", ".join(skills) if skills else "",
                str(other_skill),
                str(student_times) if student_times else "",
            ])
            load_participants_cached.clear()
            st.success("Ï†úÏ∂ú ÏôÑÎ£å! Ï∞∏Í∞ÄÏûê ÌòÑÌô©Ïóê Î∞òÏòÅÎêòÏóàÏäµÎãàÎã§.")
            st.session_state.show_participants = True
            st.rerun()

        else:
            ws_absentees.append_row([str(name), str(reason)])
            load_absentees_cached.clear()
            st.success("Ï†úÏ∂ú ÏôÑÎ£å! Î∂àÏ∞∏Ïûê Î™©Î°ùÏóê Î∞òÏòÅÎêòÏóàÏäµÎãàÎã§.")
            st.session_state.show_absentees = True
            st.rerun()


# ------------------ ÎπÑÍ¥ÄÎ¶¨Ïûê ÌôîÎ©¥ ------------------
if not st.session_state.is_admin:
    if not is_finalized():
        st.subheader("üë• Ï∞∏Í∞ÄÏûê ÌòÑÌô©")
        participants_data = load_participants_cached()

        if participants_data:
            # ÏãúÍ∞ÑÎåÄ ÏßëÌï© ÏÉùÏÑ± (ÏΩîÏπ≠ÏûêÏôÄ Î†àÏä®Ïûê ÏãúÍ∞Ñ Ìï©ÏπòÍ∏∞)
            coach_times = sorted(set(
                t.strip()
                for p in participants_data if p.get("ÏΩîÏπ≠ Í∞ÄÎä• ÏãúÍ∞ÑÎåÄ")
                for t in p["ÏΩîÏπ≠ Í∞ÄÎä• ÏãúÍ∞ÑÎåÄ"].split(",")
            ))
            student_times = sorted(set(
                t.strip()
                for p in participants_data if p.get("Î†àÏä® Ìù¨Îßù ÏãúÍ∞ÑÎåÄ")
                for t in p["Î†àÏä® Ìù¨Îßù ÏãúÍ∞ÑÎåÄ"].split(",")
            ))
            all_times = sorted(set(coach_times + student_times))

            for t in all_times:
                with st.expander(f"üïí {t}", expanded=True):
                    # ÏãúÍ∞ÑÎåÄÎ≥Ñ ÏΩîÏπ≠Ïûê
                    coaches = [p["Ïù¥Î¶Ñ"] for p in participants_data
                               if p.get("Ïó≠Ìï†") == "ÏΩîÏπ≠Ïûê" and t in parse_times(p.get("ÏΩîÏπ≠ Í∞ÄÎä• ÏãúÍ∞ÑÎåÄ"))]
                    # ÏãúÍ∞ÑÎåÄÎ≥Ñ Î†àÏä®Ïûê
                    students = [p["Ïù¥Î¶Ñ"] for p in participants_data
                                if p.get("Ïó≠Ìï†") == "Î†àÏä®Ïûê" and t in parse_times(p.get("Î†àÏä® Ìù¨Îßù ÏãúÍ∞ÑÎåÄ"))]

                    st.markdown("**‚≠ê ÏΩîÏπ≠Ïûê**")
                    st.write("\n".join([f"- {c}" for c in coaches]) if coaches else "ÏóÜÏùå")

                    st.markdown("**üí° Î†àÏä®Ïûê**")
                    st.write("\n".join([f"- {s}" for s in students]) if students else "ÏóÜÏùå")

        else:
            st.info("Ï∞∏Í∞ÄÏûê Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")

        st.warning("‚ö†Ô∏è ÏïÑÏßÅ ÏµúÏ¢Ö Îß§Ïπ≠Ïù¥ ÏôÑÎ£åÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.")

    else:
        # ‚úÖ ÏµúÏ¢Ö Îß§Ïπ≠ Í≤∞Í≥º
        matches = load_matches_cached()
        timeslots = sorted(set([m.get("ÏãúÍ∞Ñ") for m in matches if m.get("ÏãúÍ∞Ñ")]))

        if not timeslots:
            st.warning("ÏµúÏ¢Ö Îß§Ïπ≠ Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.")
        else:
            st.subheader("‚úÖ ÏµúÏ¢Ö Îß§Ïπ≠ Í≤∞Í≥º")
            for t in timeslots:
                with st.expander(f"üïí {t}", expanded=True):
                    t_matches = [m for m in matches if m.get("ÏãúÍ∞Ñ") == t]
                    for m in t_matches:
                        coach = m.get("ÏΩîÏπ≠Ïûê", "")
                        student = m.get("Î†àÏä®Ïûê", "")
                        skill = m.get("Í∏∞Ïà†", "")
                        st.markdown(
                            f"**{m.get('ÏΩîÌä∏', '')}**  \n"
                            f"- ‚≠ê ÏΩîÏπ≠Ïûê: {coach if coach else 'ÏóÜÏùå'}  \n"
                            f"- üí° Î†àÏä®Ïûê: {student if student and student != 'Îπà ÏΩîÌä∏' else 'ÏóÜÏùå'}  \n"
                            f"- üè∏ Í∏∞Ïà†: {skill if skill else '-'}"
                        )

        # ÏΩîÏπ≠ ÌõÑÍ∏∞ ÏûëÏÑ±
        st.subheader("üìù ÏΩîÏπ≠ ÌõÑÍ∏∞ ÏûëÏÑ±")
        name = st.text_input("Ïù¥Î¶Ñ ÏûÖÎ†•", key="feedback_name")
        role = st.selectbox("Ïó≠Ìï†", ["ÏΩîÏπ≠Ïûê", "Î†àÏä®Ïûê"], key="feedback_role")
        time = st.selectbox("ÏãúÍ∞ÑÎåÄ ÏÑ†ÌÉù", ["1:10~1:20", "1:20~1:30", "1:30~1:40", "1:40~1:50"], key="feedback_time")
        feedback = st.text_area("ÏΩîÏπ≠ ÌõÑÍ∏∞ ÏûëÏÑ±", key="feedback_text")

        if st.button("ÏΩîÏπ≠ ÏôÑÎ£å", key="complete_feedback_btn"):
            if name and feedback:
                now = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                ws_feedbacks.append_row([role, name, time, feedback, now])
                load_feedbacks_cached.clear()
                st.success("ÏΩîÏπ≠ ÏôÑÎ£å! Ï∂úÏÑùÏù¥ Í∏∞Î°ùÎêòÏóàÏäµÎãàÎã§.")
            else:
                st.warning("Ïù¥Î¶ÑÍ≥º ÌõÑÍ∏∞Îäî Î∞òÎìúÏãú ÏûÖÎ†•Ìï¥Ïïº Ìï©ÎãàÎã§.")
